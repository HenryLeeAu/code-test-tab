{"version":3,"sources":["apis.js","actions/index.js","actions/types.js","components/Location.js","components/RacingListItem.js","utils/timeToGo.js","components/RacingList.js","components/RacingTypeFilter.js","components/App.js","serviceWorker.js","reducers/pageStatus.js","reducers/index.js","index.js","Root.js"],"names":["baseApi","fetchRacingList","dispatch","getState","console","log","concat","pageStatus","location","axios","get","then","res","newArr","data","races","sort","a","b","Date","raceStartTime","type","payload","catch","error","Location","this","props","updateLocation","_this","react_default","createElement","className","map","key","onClick","e","handleClick","Component","connect","state","_ref2","RacingListItem","_props$raceItem","raceItem","raceName","raceNumber","meeting","meetingDate","meetingName","curTime","eveTime","c","getTime","dd","Math","floor","dh","dm","round","sd","sh","sm","timeToGo","currentTime","RacingList","_this2","interval","setInterval","setState","clearInterval","_this3","filteredList","sorted_data","filter","item","raceType","length","index","RaceTypeFilter","racingType","updateRacingType","filterWord","text","tab","_ref","App","components_Location","RacingTypeFilter","components_RacingList","Boolean","window","hostname","match","defaultState","combineReducers","arguments","undefined","action","Object","objectSpread","ReactDOM","render","children","_ref$initialState","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","ReduxThunk","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46ef3438.chunk.js","sourcesContent":["export const baseApi =\n  '/api/v1/tab-info-service/racing/next-to-go/races?jurisdiction=';\n","import {\n  GET_RACING_LIST,\n  UPDATE_LOCATION,\n  UPDATE_RACING_TYPE,\n} from 'actions/types';\nimport axios from 'axios';\nimport { baseApi } from 'apis';\n\nexport const getRacingList = data => {\n  return {\n    type: GET_RACING_LIST,\n    payload: data,\n  };\n};\n\nexport const updateRacingType = ({ racingType }) => {\n  return {\n    type: UPDATE_RACING_TYPE,\n    payload: racingType,\n  };\n};\nexport const updateLocation = ({ location }) => {\n  return dispatch => {\n    dispatch({\n      type: UPDATE_LOCATION,\n      payload: location,\n    });\n    return dispatch(fetchRacingList());\n  };\n};\n\nexport const fetchRacingList = () => {\n  return (dispatch, getState) => {\n    console.log(`${baseApi}${getState().pageStatus.location}`);\n    axios\n      .get(`${baseApi}${getState().pageStatus.location}`)\n      .then(res => {\n        const newArr = res.data.races.sort(function(a, b) {\n          return new Date(a.raceStartTime) - new Date(b.raceStartTime);\n        });\n        return dispatch(getRacingList(newArr));\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n};\n","\n\nexport const GET_RACING_LIST = 'GET_RACING_LIST';\n\nexport const UPDATE_RACING_TYPE = 'UPDATE_RACING_TYPE'\nexport const UPDATE_LOCATION = 'UPDATE_LOCATION'\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateLocation } from 'actions';\nclass Location extends Component {\n  componentDidMount() {}\n  handleClick(location) {\n    this.props.updateLocation({ location });\n  }\n  render() {\n    const arr = ['NSW', 'VIC'];\n    return (\n      <ul className=\"tab location\">\n        {arr.map(location => {\n          return (\n            <li key={location}>\n              <button\n                className={\n                  this.props.pageStatus.location === location ? 'clicked' : ''\n                }\n                onClick={e => this.handleClick(location)}\n              >\n                {location}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pageStatus: state.pageStatus,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { updateLocation }\n)(Location);\n","import React from 'react';\r\nimport timeToGo from 'utils/timeToGo';\r\nexport default props => {\r\n  const { raceStartTime, raceName, raceNumber, meeting } = props.raceItem;\r\n  const { meetingDate, meetingName, location } = meeting;\r\n\r\n  return (\r\n    <li>\r\n      <button>\r\n        <div className=\"raceNumber\">\r\n          <strong>R{raceNumber}</strong>\r\n        </div>\r\n        <div>\r\n          <h2 className=\"raceName\">{raceName}</h2>\r\n        </div>\r\n        <div>{timeToGo(props.currentTime, raceStartTime)}</div>\r\n        <div className=\"meetingName\">\r\n          {meetingName}({location})\r\n        </div>\r\n        <div className=\"meetingDate\">{meetingDate}</div>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n","export default (curTime, eveTime) => {\r\n  let c = new Date(curTime).getTime();\r\n  let e = new Date(eveTime).getTime();\r\n  if (e - c > 0) {\r\n    //dd = date difference  dh = hour difference  dm = minute difference\r\n    let dd = Math.floor((e - c) / 86400000);\r\n    let dh = Math.floor(((e - c) % 86400000) / 3600000);\r\n    let dm = Math.round((((e - c) % 86400000) % 3600000) / 60000);\r\n    let sd = dd > 0 ? `${dd}D` : '';\r\n    let sh = dh > 0 ? `${dh}H` : '';\r\n    let sm = dm > 0 ? `${dm}M` : '';\r\n    return `${sd} ${sh} ${sm}`;\r\n  } else {\r\n    return 'Finished';\r\n  }\r\n};\r\n","import React, { Component } from 'react';\nimport RacingListItem from 'components/RacingListItem';\nimport { connect } from 'react-redux';\nimport { fetchRacingList } from 'actions';\nclass RacingList extends Component {\n  state = {\n    currentTime: new Date().getTime(),\n  };\n \n  componentDidMount() {\n    this.props.fetchRacingList();\n    this.interval = setInterval(() => {\n      this.setState({\n        currentTime: new Date().getTime(),\n      });\n    }, 60000);\n  }\n  componentWillUnmount(){\n    clearInterval(this.interval);\n    \n  }\n  render() {\n    const filteredList = this.props.pageStatus.sorted_data.filter(item => {\n      return item.meeting.raceType === this.props.pageStatus.filter;\n    });\n    if (filteredList.length) {\n      return (\n        <ul className=\"list\">\n          {filteredList.map((raceItem, index) => {\n            return (\n              <RacingListItem\n                raceItem={raceItem}\n                key={index + raceItem.raceName}\n                currentTime={this.state.currentTime}\n              />\n            );\n          })}\n        </ul>\n      );\n    } else {\n      return <div>Noresult</div>;\n    }\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    pageStatus: state.pageStatus,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { fetchRacingList }\n)(RacingList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateRacingType } from 'actions';\nclass RaceTypeFilter extends Component {\n  componentDidMount() {}\n  handleClick(racingType) {\n    this.props.updateRacingType({ racingType });\n  }\n  render() {\n    const arr = [\n      { filterWord: 'R', text: 'Thoroughbred' },\n      { filterWord: 'G', text: 'Greyhounds' },\n      { filterWord: 'H', text: 'Harness' },\n    ];\n\n    return (\n      <ul className=\"tab type\">\n        {arr.map(tab => {\n          const { filterWord, text } = tab;\n          return (\n            <li key={text}>\n              <button\n                onClick={e => this.handleClick(filterWord)}\n                className={\n                  this.props.pageStatus.filter === filterWord ? 'clicked' : ''\n                }\n              >\n                {text}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    pageStatus: state.pageStatus,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  { updateRacingType }\n)(RaceTypeFilter);\n","import React, { Component } from 'react';\nimport Location from 'components/Location';\nimport RacingList from 'components/RacingList';\nimport RacingTypeFilter from 'components/RacingTypeFilter';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"nav\">\n          <div className=\"content\">\n            <Location />\n          </div>\n        </nav>\n        <div className=\"main content \">\n          <h1>Next To Go</h1>\n          <div>\n            <RacingTypeFilter />\n          </div>\n          <RacingList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  GET_RACING_LIST,\n  UPDATE_LOCATION,\n  UPDATE_RACING_TYPE,\n} from 'actions/types';\n\nexport const defaultState = {\n  sorted_data: [],\n  location: 'NSW', //VIC\n  filter: 'R', //G H\n};\nexport default function(state = defaultState, action) {\n  switch (action.type) {\n    case GET_RACING_LIST:\n      return {\n        ...state,\n        sorted_data: action.payload,\n      };\n    case UPDATE_LOCATION:\n      return {\n        ...state,\n        filter: 'R',\n        location: action.payload,\n      };\n    case UPDATE_RACING_TYPE:\n      return {\n        ...state,\n        filter: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport pageStatusReducer from 'reducers/pageStatus';\nexport default combineReducers({\n  pageStatus: pageStatusReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\nimport Root from 'Root';\nReactDOM.render(\n  <Root>\n    <App />\n  </Root>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// reuse redux provider in real component and testing code\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducers from 'reducers';\nimport ReduxThunk from 'redux-thunk';\n\nexport default ({ children, initialState = {} }) => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(\n    reducers,\n    initialState,\n    composeEnhancers(applyMiddleware(ReduxThunk))\n  );\n\n  return <Provider store={store}>{children}</Provider>;\n};\n"],"sourceRoot":""}